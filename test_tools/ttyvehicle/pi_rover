#!/usr/bin/python -B

import multiprocessing
import time
import ConfigParser
import json
import argparse
import sys

from subprocess import *

#from Adafruit_PWM_Servo_Driver import PWM
from class_pwm import PWM
import class_servo as servo
import class_rmq as mq
import class_gps as gpsreader
import class_camera as camera

import func_ttyGPIO as GPIO
import func_logging as log
import func_sensors as sensors


# Setup input arguments
arg_parser = argparse.ArgumentParser(description='Usage options for ttyvehicle')
arg_parser.add_argument('-c', '--configfile', help="Optional - configuration file path")
arg_parser.add_argument('-l', '--logfile', help="Optional - Log file path")
# Process input and generate dict
args = vars(arg_parser.parse_args())


# Validate input - Config file
if args['configfile'] != None:
    configfilepath = args['configfile']
else:
    configfilepath = 'pi_rover.cfg'

# Get config
try:
    config = ConfigParser.ConfigParser()
    config.read(configfilepath)
except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))


# Validate input - Log file
if args['logfile'] != None:
    logfilepath = args['logfile']
else:
    logfilepath = config.get('logging', 'path')    

# Setup logging
try:
    logfile = log.CreateLogger(toconsole=False, tofile=True, filepath=logfilepath, level=config.get('logging', 'level'))
    assert logfile, "Error: Failed to create log outputs"

except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))


try:
    # ID
    VEHICLE_ID = config.get('vehicle_id', 'id')

    # Queue settings
    CONTROL_EXCHANGE = config.get('control_exchange', 'name')
    CONTROL_HOST = config.get('control_exchange', 'host')
    CONTROL_PORT = int(config.get('control_exchange', 'port'))

    VEHICLE_EXCHANGE = config.get('vehicle_exchange', 'name')
    VEHICLE_HOST = config.get('vehicle_exchange', 'host')
    VEHICLE_PORT = int(config.get('vehicle_exchange', 'port'))

    # Define servos
    DIRECTION_SERVO = servo.StandardServo(config.get('direction', 'channel'),
                                config.get('direction', 'right'),
                                config.get('direction', 'left'),
                                config.get('direction', 'center'),
                                config.get('direction', 'name'))

    DIRECTION_INVERT = config.get('direction', 'invert')

    BRAKE_SERVO = servo.StandardServo(config.get('brake', 'channel'),
                                config.get('brake', 'on'),
                                config.get('brake', 'off'),
                                config.get('brake', 'neutral'),
                                config.get('brake', 'name'))

    BRAKE_INVERT = config.get('brake', 'invert')

    THROTTLE_SERVO = servo.StandardServo(config.get('throttle', 'channel'),
                                config.get('throttle', 'min'),
                                config.get('throttle', 'max'),
                                config.get('throttle', 'neutral'),
                                config.get('throttle', 'name'))

    THROTTLE_INVERT = config.get('throttle', 'invert')

    CAMERA_PAN_SERVO = servo.StandardServo(config.get('camera_pan', 'channel'),
                             config.get('camera_pan', 'min'),
                             config.get('camera_pan', 'max'),
                             config.get('camera_pan', 'neutral'),
                             config.get('camera_pan', 'name'))

    CAMERA_PAN_INVERT = config.get('camera_pan', 'invert')

    CAMERA_TILT_SERVO = servo.StandardServo(config.get('camera_tilt', 'channel'),
                             config.get('camera_tilt', 'min'),
                             config.get('camera_tilt', 'max'),
                             config.get('camera_tilt', 'neutral'),
                             config.get('camera_tilt', 'name'))

    CAMERA_TILT_INVERT = config.get('camera_tilt', 'invert')

    VEHICLE_CAMERA_NAME = config.get('camera', 'name')
    VEHICLE_CAMERA_BIND_ADDRESS = config.get('camera', 'bind_address')
    VEHICLE_CAMERA_PORT = config.get('camera', 'port')
    VEHICLE_CAMERA_RESOLUTION_X = config.get('camera', 'resolution_x')
    VEHICLE_CAMERA_RESOLUTION_Y = config.get('camera', 'resolution_y')

    VEHICLE_CAMERA_STILLS_URL = config.get('camera', 'stills_url')

    LIGHTS_CAMERA_GPIO = int(config.get('lights', 'camera_gpio_pin'))
    LIGHTS_VEHICLE_GPIO = int(config.get('lights', 'vehicle_gpio_pin'))

except ConfigParser.NoSectionError as err:
    raise SystemExit("Error: " + str(err))

except ConfigParser.NoOptionError as err:
    raise SystemExit("Error: " + str(err))

except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))


# Create PWM object
try:
    pwm = PWM(0x40, debug=True)
    pwm.setPWMFreq(60) 
except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))


# Global Dictionary for camera still requests
PENDING_IMAGE_REQUESTS = {}


# Configure GPIO pins
#try:
#    GPIO.setmode(GPIO.BCM)
#    GPIO.setup(LIGHTS_CAMERA_GPIO, GPIO.OUT)
#    GPIO.setup(LIGHTS_VEHICLE_GPIO, GPIO.OUT)
#except:
#    raise SystemExit("FATAL: Could not configure GPIO")

def SendPWM(channel,start,end):
    # PWM output requires channel, start and end. Start and end refer to the start point and length of the pulse.
    # Typically all pulses start at '0'.
    try:
        float_start = float(start)
        float_end = float(end)

        pwm.setPWM(int(channel),int(float_start),int(float_end))
        logfile.debug("servo data: " + str(channel) + "," + str(int(float_start)) + "," + str(int(float_end)))
        return(True)

    except: 
        return(False)
        logfile.warning("Could not send data to PWM")


## Run external commands, returns output
def _run_cmd(cmd):
    try:
        p = Popen(cmd, shell=True, stdout=PIPE)
        output = p.communicate()[0]
        return output

    except:
        return(False)    

def _shutdownVehicle():
    shutdown_cmd = "poweroff"

    cmd_result = _run_cmd(shutdown_cmd)
    assert cmd_result, "Error: Failed to execute shutdown command"


def _vehicleControl(data):
## Process recieved control data
    try:
        json_data = json.loads(data)
        print str(json_data)
         
        if 'vehicle' in json_data:
            # Set throttle position
            if 'throttle' in json_data['vehicle']:
                if THROTTLE_INVERT == "true":
                    throttle = int(json_data['vehicle']['throttle'])
                    throttle_inverted = 0 - throttle
                    SendPWM(THROTTLE_SERVO.Channel, 0, THROTTLE_SERVO.Translate(throttle_inverted))
                else:
                    SendPWM(THROTTLE_SERVO.Channel, 0, THROTTLE_SERVO.Translate(int(json_data['vehicle']['throttle'])))

            # Set direction position
            if 'direction' in json_data['vehicle']:
                if DIRECTION_INVERT == "true":
                    direction = int(json_data['vehicle']['direction'])
                    direction_inverted = 0 - direction
                    SendPWM(DIRECTION_SERVO.Channel, 0, DIRECTION_SERVO.Translate(direction_inverted))
                else:
                    SendPWM(DIRECTION_SERVO.Channel, 0, DIRECTION_SERVO.Translate(json_data['vehicle']['direction']))
                 

            if 'brake' in json_data['vehicle']:
                if BRAKE_INVERT == "true":
                    if json_data['vehicle']['brake'] == True:
                        SendPWM(BRAKE_SERVO.Channel, 0, BRAKE_SERVO.Translate(100))
                    else:
                        SendPWM(BRAKE_SERVO.Channel, 0, BRAKE_SERVO.Translate(0))
                else:
                    if json_data['vehicle']['brake'] == True:
                        SendPWM(BRAKE_SERVO.Channel, 0, BRAKE_SERVO.Translate(0))
                    else:
                        SendPWM(BRAKE_SERVO.Channel, 0, BRAKE_SERVO.Translate(100))

            if 'light' in json_data['vehicle']:
                    if json_data['vehicle']['light'] == True:
                        GPIO.output(LIGHTS_VEHICLE_GPIO, True)
                    else:
                        GPIO.output(LIGHTS_VEHICLE_GPIO, False)


        if 'camera' in json_data:
            if 'tilt' in json_data['camera']:
                if CAMERA_TILT_INVERT == "true":
                    camera_tilt = int(json_data['camera']['tilt'])
                    camera_tilt_inverted = 0 - camera_tilt
                    SendPWM(CAMERA_TILT_SERVO.Channel, 0, CAMERA_TILT_SERVO.Translate(camera_tilt_inverted))
                else:
                    SendPWM(CAMERA_TILT_SERVO.Channel, 0, CAMERA_TILT_SERVO.Translate(int(json_data['camera']['tilt'])))

            if 'pan' in json_data['camera']:
                if CAMERA_PAN_INVERT == "true":
                    camera_pan = int(json_data['camera']['pan'])
                    camera_pan_inverted = 0 - camera_pan
                    SendPWM(CAMERA_PAN_SERVO.Channel, 0, CAMERA_PAN_SERVO.Translate(camera_pan_inverted))
                else:
                    SendPWM(CAMERA_PAN_SERVO.Channel, 0, CAMERA_PAN_SERVO.Translate(int(json_data['camera']['pan'])))

            if 'light' in json_data['camera']:
                if json_data['camera']['light'] == True:
                    GPIO.output(LIGHTS_CAMERA_GPIO, True)
                else:
                    GPIO.output(LIGHTS_CAMERA_GPIO, False)

            if 'takestill' in json_data['camera']:
                request_details = json_data['camera']['takestill']
                PENDING_IMAGE_REQUESTS[request_details['correl']] = request_details                
                PENDING_IMAGE_REQUESTS[request_details['correl']]['status'] = "pending"

        if 'state' in json_data:
            if 'shutdown' in json_data['state']:
                if json_data['state']['shutdown'] == True:
                    _shutdownVehicle()

        return(True)

    except:
        return(False)
        logfile.warning("Could not process control data")




def _vehicleSensors(gps_poller=None):

    try:
        data = {}
        data['vehicle'] = {'wifi': sensors.getWifi(),
                           'batteryA': sensors.getBatteryA(),
                           'batteryB': sensors.getBatteryB()}
      
        data['environment'] = {'temperature': sensors.getEnvironment_temperature(),
                               'humidity': sensors.getEnvironment_humidity(),
                               'pressure': sensors.getEnvironment_pressure()}
      
      
        if gps_poller != None:
            data['GPS'] = {'latitude': str(sensors.getGPS_lat(gps_poller)),
                           'longitude': str(sensors.getGPS_long(gps_poller)),
                           'speed': sensors.getGPS_speed(gps_poller),
                           'altitude': sensors.getGPS_altitude(gps_poller)}
      
        accelerometer_x, accelerometer_y = sensors.getMovement_Accelerometer()
        data['accelerometer'] = {'x': accelerometer_x,
                                 'y': accelerometer_y}
      
        return(data)

    except:
        return(False)



def main():

    # Main loop
    while 1:

        # Setup GPS Poller
        gps_poller = gpsreader.gpsPoller()
        gps_poller.daemon = True
        gps_poller.start()


        # Setup vehicle camera
        vehicle_camera = camera.camera(log=logfile)

        # Set control queue reader and start in new thread
        control_reader = mq.rmqClientReader(host=CONTROL_HOST, port=CONTROL_PORT, log=logfile)

        # Hold loop while reader is not connected
        while control_reader.connected == False:
            logfile.error("Could not connect to control queue server, reconnecting....")
            control_reader = mq.rmqClientReader(host=CONTROL_HOST, port=CONTROL_PORT, log=logfile)
            time.sleep(1)

        # Hold loop while not subscribed
        result = control_reader.subscribe(exchange=CONTROL_EXCHANGE, topic=VEHICLE_ID)
        while result == False:
            logfile.error("Could not subscribe to control topic, retrying....")
            result = control_reader.subscribe(exchange=CONTROL_EXCHANGE, topic=VEHICLE_ID)
            time.sleep(1)
        
        control_pconn, control_cconn = multiprocessing.Pipe()
        control_worker = multiprocessing.Process(target=control_reader.run, args=(control_cconn,))
        control_worker.daemon = True
        control_worker.start()


        # Setup writer queue for vehicle data
        # Hold loop if not connected
        sensor_writer = mq.rmqClientWriter(host=VEHICLE_HOST, port=VEHICLE_PORT, log=logfile)
        while sensor_writer.connected == False:
            logfile.error("Could not connect to vehicle queue server, reconnecting....")
            sensor_writer = mq.rmqClientWriter(host=VEHICLE_HOST, port=VEHICLE_PORT, log=logfile)
            time.sleep(1)
    
        # Hold loop if exchange declare fails
        result = sensor_writer.declareExchange(VEHICLE_EXCHANGE)
        while result == False:
            logfile.error("Could not create vehicle exchange, retrying....")
            result = sensor_writer.declareExchange(VEHICLE_EXCHANGE)
            time.sleep(1)
            

        # Transmit/Monitor loop
        counter = 0
        while 1:
            # Recieve control data
            if control_pconn.poll() == True:
                result = _vehicleControl(control_pconn.recv())
                if result == False: logfile.error("Error: Failure processing control data")


            # Transmit data on sub-loop
            if counter == 0 or counter == 10:
                counter = 0
                vehicle_data = _vehicleSensors(gps_poller)
                if vehicle_data == False: logfile.error("Error: Failed to process sensor data")

                # Attempt transmit, reinit writer if fails 
                if sensor_writer.publish(topic=VEHICLE_ID, data=json.dumps(vehicle_data)) == False:
                    logfile.error("Sensor writer has died - attempting to restart....")
                    sensor_writer = mq.rmqClientWriter(host=VEHICLE_HOST, port=VEHICLE_PORT, log=logfile)
                    time.sleep(1)


                # Loop pending image requests
                for request in PENDING_IMAGE_REQUESTS:
                    # Process pending requests
                    if PENDING_IMAGE_REQUESTS[request]['status'] == 'pending':
                        # Only attempt if GPS data is present
                        if 'GPS' in vehicle_data and 'latitude' in vehicle_data['GPS'] and 'longitude' in vehicle_data['GPS']:
                            try:
                                # Form message content and trigger capture
                                message = {'camera': {'still': ""}}
                                image_path = vehicle_camera.captureStill(lat=vehicle_data['GPS']['latitude'], long=vehicle_data['GPS']['longitude'])

                                # Only complete if capture was successful
                                if image_path != False:
                                    PENDING_IMAGE_REQUESTS[request]['msg'] = VEHICLE_CAMERA_STILLS_URL + image_path
                                    message['camera']['still'] = PENDING_IMAGE_REQUESTS[request]
                                    PENDING_IMAGE_REQUESTS[request]['status'] = 'sent'

                                    # Write to RMQ
                                    sensor_writer.publish(topic=VEHICLE_ID, data=json.dumps(message))

                                else:
                                    logfile.error("Error: No image file generated")

                            except:
                                logfile.error("Error: Failed to send image message")




                # Emergency stop 
                if int(vehicle_data['vehicle']['wifi']) < 10:
                    logfile.warn("Wifi value low - applying emergency stop")
                    SendPWM(THROTTLE_SERVO.Channel, 0, THROTTLE_SERVO.RealNeutral)
                    SendPWM(BRAKE_SERVO.Channel, 0, BRAKE_SERVO.RealMin)





            # Monitor control worker thread 
            if control_worker.is_alive() == False:
                logfile.error("Control reader has died - attempting to restart....")

                # Re-init thread
                control_reader = mq.rmqClientReader(host=CONTROL_HOST, port=CONTROL_PORT, log=logfile)
                control_worker = multiprocessing.Process(target=control_reader.run, args=(control_cconn,))
                control_worker.daemon = True
                control_worker.start()
                time.sleep(1)


            # Annotate video stream
            #vehicle_camera.camera.annotate_text = ("Wifi: " + str(vehicle_data['vehicle']['wifi']) + "% - "\
            #                                       "Battery A: " + str(vehicle_data['vehicle']['batteryA']) + "% - "\
            #                                       "Battery B: " + str(vehicle_data['vehicle']['batteryB']) + "%")


            counter += 1
            time.sleep(.1)
 

            



    #vehicle_camera.join()
    gps_poller.join()
    control_worker.join()



if __name__ == '__main__':
    try:
        main()     

    except (KeyboardInterrupt, SystemExit) as err:
        print str(err) + " -- Exiting..."

    except AssertionError as err:
        print str(err)

    except:
        print "Error: unknown error - " + str(sys.exc_info()[0])

