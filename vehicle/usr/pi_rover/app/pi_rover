#!/usr/bin/python
#from Adafruit_PWM_Servo_Driver import PWM

import ConfigParser
import time
import sys
import socket
import re

import class_servo as servo
import class_gimbal as gimbal



def TranslatePWM_Servo(list,name,data):
	if list.has_key(name):
		SendPWM(int(list[name].Channel),0,int(list[name].Translate(data)))


def TranslatePWM_Gimbal(list,name,data_x,data_y):
	if list.has_key(name):
		real_value_x, real_value_y = list[name].Translate(int(data_x),int(data_y))

		SendPWM(int(list[name].XServo.Channel),0,int(real_value_x))
		SendPWM(int(list[name].YServo.Channel),0,int(real_value_y))


def EmergencyStop(servo):
	SendPWM(servo.Channel,0,servo.RealNeutral)


def SendPWM(channel,start,end):	
	# PWM output requires channel, start and end. Start and end refer to the start point and length of the pulse.
	# Typically all pulses start at '0'.
	
#	pwm.setPWM(channel,start,end)
	print(channel,start,end)


config = ConfigParser.ConfigParser()
config.read('pi_rover.cfg')

#pwm = PWM(0x40, debug=True)
#pwm.setPWMFreq(60)                      


# Define servos
dir_servo = servo.StandardServo(config.get('direction', 'channel'),
				config.get('direction', 'right'),
				config.get('direction', 'left'),
				config.get('direction', 'center'),
				config.get('direction', 'name'))

brk_servo = servo.StandardServo(config.get('brake', 'channel'),
				config.get('brake', 'on'),
				config.get('brake', 'off'),
				config.get('brake', 'neutral'),
				config.get('brake', 'name'))

thr_servo = servo.StandardServo(config.get('throttle', 'channel'),
				config.get('throttle', 'min'),
				config.get('throttle', 'max'),
				config.get('throttle', 'neutral'),
				config.get('throttle', 'name'))

gim_servo = gimbal.XYGimbal((config.get('gimbal', 'channel_x'),    # X Axis
			     config.get('gimbal', 'min_x'),
			     config.get('gimbal', 'max_x'),
			     config.get('gimbal', 'neutral_x'),
			     config.get('gimbal', 'name_x')),
			    (config.get('gimbal', 'channel_y'),	   # Y Axis
			     config.get('gimbal', 'min_y'),
			     config.get('gimbal', 'max_y'),
			     config.get('gimbal', 'neutral_y'),
			     config.get('gimbal', 'name_y')),
	                     config.get('gimbal', 'name'))

# Build dictionary of servos using servo name as key and servo as value (object)
servo_list = {dir_servo.Name:dir_servo, brk_servo.Name:brk_servo, thr_servo.Name:thr_servo}
gimbal_list = {gim_servo.Name:gim_servo}

net_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
net_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

net_socket.bind((config.get('network', 'server_ip'), int(config.get('network', 'server_port'))))
BUFFER_SIZE = int(config.get('network', 'buffer'))

net_socket.listen(1)

while 1:
        conn, addr = net_socket.accept()
        print "Connected to ", addr

        while 1:
           data = conn.recv(BUFFER_SIZE)
           if not data: break

           data = data.split(";")
		
	   for packet in data:
		if len(packet) >= 5:
			if packet.find(",") >= 0:			
				if int(packet.split(",")[0]) == 0:
					# Expected Servo packet = type, name, data
					TranslatePWM_Servo(servo_list,packet.split(",")[1],packet.split(",")[2])
					
				elif int(packet.split(",")[0]) == 1:
					# Expected Gimbal packet = type, name, x data, y data
					TranslatePWM_Gimbal(gimbal_list,packet.split(",")[1],packet.split(",")[2],packet.split(",")[3])
 
	print "Disconnected"
	for servo_name in servo_list.keys():
		EmergencyStop(servo_list[servo_name])




