#!/usr/bin/python
#from Adafruit_PWM_Servo_Driver import PWM

import ConfigParser
import time
import sys
import socket
import re

import class_servo as servo
import class_gimbal as gimbal

config = ConfigParser.ConfigParser()
config.read('pi_rover.cfg')

#pwm = PWM(0x40, debug=True)
#pwm.setPWMFreq(60)                      


# Define servos
dir_servo = servo.StandardServo(config.get('direction', 'channel'),config.get('direction', 'left'),config.get('direction', 'right'),config.get('direction', 'center'),config.get('direction', 'name'))
brk_servo = servo.StandardServo(config.get('brake', 'channel'),config.get('brake', 'on'),config.get('brake', 'off'),config.get('brake', 'neutral'),config.get('brake', 'name'))
thr_servo = servo.StandardServo(config.get('throttle', 'channel'),config.get('throttle', 'min'),config.get('throttle', 'max'),config.get('throttle', 'neutral'),config.get('throttle', 'name'))
gim_servo = gimbal.XYGimbal((config.get('gimbal', 'channel_x'),config.get('gimbal', 'min_x'),config.get('gimbal', 'max_x'),config.get('gimbal', 'neutral_x'),config.get('gimbal', 'name_x')),(config.get('gimbal', 'channel_y'),config.get('gimbal', 'min_y'),config.get('gimbal', 'max_y'),config.get('gimbal', 'neutral_y'),config.get('gimbal', 'name_y')),config.get('gimbal', 'name'))

# Build dictionary of servos using servo name as key and servo as value (object)
servo_list = {dir_servo.Name:dir_servo, brk_servo.Name:brk_servo, thr_servo.Name:thr_servo, gim_servo.Name:gim_servo}
#print(servo_list)

net_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
net_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

net_socket.bind((config.get('network', 'client_ip'), int(config.get('network', 'client_port'))))
BUFFER_SIZE = config.get('network', 'buffer')

net_socket.listen(1)

while 1:
        conn, addr = net_socket.accept()
        print "Connected to ", addr

        while 1:
           data = conn.recv(BUFFER_SIZE)
           if not data: break

           data = data.split(";")

	   for packet in data:
		if servo_list.has_key(packet.split(",")[0]):
#			pwm.setPWM(int(servo_list[packet.split(",")[0]].Channel), 0, int(packet.split(",")[1]))
			print(int(servo_list[packet.split(",")[0]].Channel), 0, int(packet.split(",")[1]))
 
	print "Disconnected"
	for servo_name, servo_object in servo_list:
#		pwm.setPWM(servo_object.Channel, 0, servo_object.Translate(0))
		print(servo_object.Channel, 0, servo_object.Translate(0))
