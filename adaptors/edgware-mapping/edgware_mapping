#!/usr/bin/python -B

import json
import time
import multiprocessing
import ConfigParser
import argparse
import sys
import os.path

import class_mqtt as mqtt
import class_edgware as edgware


# Setup input arguments
arg_parser = argparse.ArgumentParser(description='Usage options for edgware adaptor')
arg_parser.add_argument('-c', '--configfile', help="Optional - configuration file path")
arg_parser.add_argument('-l', '--logfile', help="Optional - Log file path")
# Process input and generate dict
args = vars(arg_parser.parse_args())


# Validate input - Config file
if args['configfile'] != None:
    configfilepath = args['configfile']
else:
    configfilepath = 'edgware_mapping.cfg'

if not os.path.isfile(configfilepath):
   raise SystemExit("ERROR: File not found - " + str(configfilepath))

# Get config
try:
    config = ConfigParser.ConfigParser()
    config.read(configfilepath)
except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))


# Parse config data, convert to vars
try:
    # Mosquitto connection details
    MQTT_HOST = config.get('edgware_broker', 'server')
    MQTT_PORT = int(config.get('edgware_broker', 'port'))
    MQTT_TOPIC_IN = config.get('edgware_broker', 'input_topic')
    MQTT_TOPIC_OUT = config.get('edgware_broker', 'output_topic')
    UNIT_ID = config.get('platform', 'unit_id')

    # Edgware connection details
    EDGWARE_NODE = config.get('edgware', 'node_id')

    _DEFAULT_PLATFORM = config.get('mapping', 'platform_type')

except ConfigParser.NoSectionError as err:
    raise SystemExit("ERROR: " + str(err))

except ConfigParser.NoOptionError as err:
    raise SystemExit("Error: " + str(err))

except:
    raise SystemExit("FATAL: Unknown error - " + str(sys.exc_info()[0]))

# Global vars
PLATFORM_LOCATIONS = {}


def writeMQTTOutput(client, topic, data):
    result = client.publish(topic=topic, payload=data)
    assert result, "Error publishing MQTT message to " + str(topic)
    return(result)

    
def processMQTTInput(data):
    json_data = json.loads(data)
    correl = json_data['correl']

    # Handle 'Query Result' messages
    def queryResult(json_data):
        querytype = json_data['op'].split(":")[1]
        if querytype == "systems":
            systems = []
            for system in json_data['systems']:
                systems.append(system['id'])
            return(json_data['op'], systems, correl)

        elif querytype == "platforms":
            platforms = []
            for platform in json_data['platforms']:
                platforms.append(platform)
            return(json_data['op'], platforms, correl)

        else:
            return("unknown query", None, correl)


    # Handle 'Request' messages (unused)
    def request(json_data):
        return("request", json_data['msg'], correl)

    # Handle 'Response' messages (unused)
    def response(json_data):
        return("response", json_data['msg'], correl)

   # Handle 'Notification' messages (unused)
    def notification(json_data):
        return("notification", json_data['msg'], correl)


    input_handlers = {'request' : request,
                      'notification' : notification,
                      'response' : response,
                      'query-result:platforms' : queryResult,
                      'query-result:systems' : queryResult}

    # Select handler function based on 'op' (operation) value, return tuple
    if json_data['op'] in input_handlers: return(input_handlers[str(json_data['op'])](json_data))
        
    # Do nothing with invalid messages
    return(None, None, None)


def registerEdgwareTypes(mqtt_client):
    # Services
    services = {}
    services['reader'] = {"type":"reader",
                          "mode":"solicit-response"}

    # Systems (collections of services)
    systems = {}
    systems['data-reader'] = {"type":"data-reader",
                          "services":[{"type":services['reader']['type']}]}

    # Platforms (collections of systems)
    platforms = {}
    platforms['google-mapping'] = {"type":"google-mapping"}

    # Loop through dictionaries and populate Edgware
    try:
        i = 100
        for service in services:
            i += 1
            service_type = edgware.serviceType()
            service_type.type = services[service]['type']
            service_type.mode = services[service]['mode']
            service_type.correl = i

            message =  json.dumps(service_type.generateJSON())
            assert message, "Error generating JSON for service type " + str(services[service]['type'])
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, message)

        i = 1000
        for system in systems:
            i += 1
            system_type = edgware.systemType()
            system_type.type = systems[system]['type']
            system_type.services = systems[system]['services']
            system_type.correl = i

            message =  json.dumps(system_type.generateJSON())
            assert message, "Error generating JSON for system type " + str(services[service]['type'])
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, message)

        i = 2000
        for platform in platforms:
            i += 1
            platform_type = edgware.platformType()
            platform_type.type = platforms[platform]['type']
            platform_type.correl = i

            message =  json.dumps(platform_type.generateJSON())
            assert message, "Error generating JSON for platform type " + str(services[service]['type'])
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, message)

        return(True)

    except:
        print "Error: Unknown error - " + str(sys.exc_info()[0])
        return(False)


def main():
    #### SETUP MQTT CONNECTION
    mqtt_reader_pconn, mqtt_reader_cconn = multiprocessing.Pipe()
    mqtt_client = mqtt.mqttClient(host=MQTT_HOST, port=MQTT_PORT, pipe=mqtt_reader_cconn, client_id=("adp" + str(UNIT_ID)))

    if mqtt_client.connected != True:
        raise SystemExit("FATAL: Failed to connect to MQTT broker")

    mqtt_client.subscribe(topic=MQTT_TOPIC_OUT)
    mqtt_client.set_will(MQTT_TOPIC_IN)
    mqtt_client.client.loop_start()       


    #### CONFIGURE EDGWARE
    # Register edgware types
    result = registerEdgwareTypes(mqtt_client)
    assert result, "Error registering Edgware component types"

    ## Define elements
    # Platforms
    edgware_platform = edgware.platform()
    edgware_platform.type = "google-mapper"
    edgware_platform.id = UNIT_ID
    edgware_platform.correl = 10001
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(edgware_platform.generateJSON()))

    # Systems (+ activate)
    edgware_system = edgware.system()
    edgware_system.type = "data-reader"
    edgware_system.id = edgware_platform.id + "/data-reader"
    edgware_system.correl = 30001
    activate_system = json.dumps({"op":"state:system", "id": edgware_system.id, "state":"running", "correl":30002})
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(edgware_system.generateJSON()))
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, activate_system)

    # Wait for Edgware to complete registrations - response message will queue
    time.sleep(2)


    ## INTERNAL - Used in forever loop to update glocal dict of known platforms & systems
    def _query_platforms(type=_DEFAULT_PLATFORM):
        edgware_query = json.dumps({"op":"query:platforms", "type":type, "correl":9001})
        writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, edgware_query)  


    def _write_JSScript(addscriptpath, updatescriptpath):
        markers = {0: "'http://maps.google.com/mapfiles/ms/icons/blue-dot.png'",
                   1: "'http://maps.google.com/mapfiles/ms/icons/red-dot.png'",
                   2: "'http://maps.google.com/mapfiles/ms/icons/purple-dot.png'",
                   3: "'http://maps.google.com/mapfiles/ms/icons/yellow-dot.png'",
                   4: "'http://maps.google.com/mapfiles/ms/icons/green-dot.png'"}


        # Create 'Add' script
        try:
            addscript = open(addscriptpath, "w")
        except:
            return(False)

        addscript.write("function addMarker() {\n")
        addscript.write("    var markers = {};\n")


        # Create 'Update' script
        try:
            updatescript = open(updatescriptpath, "w")
        except:
            return(False)

        updatescript.write("function changeMarkerPosition(id, marker) {\n")
        updatescript.write("    var positions = {};\n")
        updatescript.write("    var data = {};\n")



        platform_count = 0
        marker_count = 0
        for platform in PLATFORM_LOCATIONS:
            if marker_count > 4: marker_count = 0

            # Write 'Add' script contents
            addscript.write("    //" + platform + "\n")
            addscript.write("    var position = new google.maps.LatLng(" + str(PLATFORM_LOCATIONS[platform]['location'][0]) + "," + str(PLATFORM_LOCATIONS[platform]['location'][1]) + ");\n")
            addscript.write("    bounds.extend(position);\n")
            addscript.write("    marker" + str(platform_count) + " = new google.maps.Marker({position: position,\n")
            addscript.write("                                     map: map,\n")
            addscript.write("                                     title: '" + platform + "',\n")
            addscript.write("                                     icon: " + markers[marker_count] + "});\n")
            addscript.write("\n")
            addscript.write('    markers["' + platform + '"] = marker' + str(platform_count) + ';\n')
            addscript.write("\n")

            # Center map on first platform
            if platform_count == 0: 
                addscript.write("    map.fitBounds(bounds);\n")
                addscript.write("    map.setZoom(14);\n")
                addscript.write("\n")
           
            # Write 'Update' script contents
            updatescript.write('    positions["' + platform + '"] = [' + str(PLATFORM_LOCATIONS[platform]['location'][0]) + ", " + str(PLATFORM_LOCATIONS[platform]['location'][1]) + '];\n')
            updatescript.write('    data["' + platform + '"] = "unitID: ' + platform + '";\n')
            
            platform_count += 1
            marker_count += 1

        updatescript.write('\n')
        updatescript.write("    for (var key in positions) {\n")
        updatescript.write("       if (id == key) {\n")
        updatescript.write("          var lat = positions[key][0];\n")
        updatescript.write("          var long = positions[key][1];\n")
        updatescript.write("          var latlng = new google.maps.LatLng(lat, long);\n")
        updatescript.write("          marker.setPosition(latlng);\n")
        updatescript.write("          bounds.extend(latlng);\n")


        updatescript.write('\n')
        updatescript.write("          for (var datakey in data) {\n")
        updatescript.write("              if (id == datakey) {\n")
        updatescript.write("                  var infowindow = new google.maps.InfoWindow({ content: data[datakey] });\n")
        updatescript.write("                  google.maps.event.clearInstanceListeners(marker);\n")
        updatescript.write("                  google.maps.event.addListener(marker, 'click', function() {infowindow.open(map, marker);});\n")
        updatescript.write("              }\n")
        updatescript.write("          }\n")
        updatescript.write("       }\n")
        updatescript.write("    }\n")
        updatescript.write("\n")
        updatescript.write("}\n")
        updatescript.close()


        addscript.write("    return markers;\n")
        addscript.write("}")
        addscript.close()

        return(True)



    # Appended to platform record - used as correl when querying platform
    platform_autoID = 9900

    loop_counter = 0
    # Forever loop
    while 1:

        # Slow repeat loop 
        if loop_counter == 15:
            loop_counter = 0
            # Query for all platforms - default type = simulation-platform
            _query_platforms(type="simulation-platform")

            # generate JavaScript file
            result = _write_JSScript(addscriptpath="/var/www/html/add.js", updatescriptpath="/var/www/html/update.js")
            assert result, "Error: Failed to create JavaScript files"


        if mqtt_reader_pconn.poll() == True: 
            response_type, data, correl = processMQTTInput(mqtt_reader_pconn.recv())

            if response_type == "query-result:platforms":
                # If platform is not in global dict, add it with a auto incrementing ID (autoid)
                for platform in data:
                    if platform['id'] not in PLATFORM_LOCATIONS: 
                        PLATFORM_LOCATIONS[platform['id']] = {'location':(float(platform['loc']['lat']),float(platform['loc']['long'])), 'autoid':platform_autoID}
                        platform_autoID += 1
                    else:
                        PLATFORM_LOCATIONS[platform['id']] = {'location':(float(platform['loc']['lat']),float(platform['loc']['long']))}

            elif response_type == "response":
                for platform in PLATFORM_LOCATIONS:
                    if int(PLATFORM_LOCATIONS[platform]['autoid']) == int(correl):
                        PLATFORM_LOCATIONS[platform]['location'] = (float(data[0]), float(data[1]))


        loop_counter += 1
        time.sleep(.2)


    # Clean-up
    mqtt_client.client.loop_stop()


if __name__ == '__main__':
    try: 
        main()
    except (KeyboardInterrupt, SystemExit) as err:
        print str(err) + " -- Exiting..."

    except AssertionError as err:
        print str(err)

    except:
        print "Error: unknown error - " + str(sys.exc_info()[0])


