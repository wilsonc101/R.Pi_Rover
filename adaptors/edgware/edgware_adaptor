#!/usr/bin/python -B

import json
import time
import multiprocessing
import ConfigParser

import class_mqtt as mqtt
import class_rmq as rmq
import class_edgware as edgware
import class_rover as rover


try: 
    config = ConfigParser.ConfigParser()
    config.read('edgware_adaptor.cfg')
except:
    raise SystemExit("FATAL: Could not open config file")

# RabbitMQ connection details
RMQ_HOST = config.get('platform_broker', 'server')
RMQ_PORT = int(config.get('platform_broker', 'port'))
RMQ_EXCHANGE_CONTROL = config.get('platform_broker', 'control_exchange')
RMQ_EXCHANGE_VEHICLE = config.get('platform_broker', 'vehicle_exchange')
RMQ_TOPIC = config.get('platform_broker', 'vehicle_id')

# Mosquitto connection details
MQTT_HOST = config.get('edgware_broker', 'server')
MQTT_PORT = int(config.get('edgware_broker', 'port'))
MQTT_TOPIC_IN = config.get('edgware_broker', 'input_topic')
MQTT_TOPIC_OUT = config.get('edgware_broker', 'output_topic')

# Edgware connection details
EDGWARE_NODE = config.get('edgware', 'node_id')

VEHICLE_DATA = rover.piRoverVehicle()
CONTROL_DATA = rover.piRoverControls()

def writeMQTTOutput(client, topic, data):
    client.publish(topic=topic, payload=data)
    nothing = None

def writeRMQOutput(client, exchange, topic, data):
    nothing = None

def processMQTTInput(data):
    json_data = json.loads(data)

    # Handle 'Request' messages
    def request(json_data):

        # Service types
        def getEnvironmentData(msg):
            if msg == "getTemperature":
                return(VEHICLE_DATA.environmentTemperature)

            elif msg == "getPressure":
                return(VEHICLE_DATA.environmentPressure)

            elif msg == "getHumidity":
                return(VEHICLE_DATA.environmentHumidity)

            else:
                return("unknown request")

        def getGPSData(msg):
            return("gpsdata")

        def getAccelerometerData(msg):
            return("acceldata")

        def getVehicleStatusData(msg):
            return("vehstat")

        def getVehicleControlData(msg):
            return("vehctrldata")

        def getCameraControlData(msg):
            return("camctrldata")

        type_handlers = {'environment-sensor': getEnvironmentData,
                         'gps': getGPSData,
                         'accelerometer': getAccelerometerData,
                         'vehicle-status': getVehicleStatusData,
                         'vehicle-control': getVehicleControlData,
                         'camera-control': getCameraControlData}

        # Extract request data
        op = json_data['op']
        msg = json_data['msg']
        solicit_response = json_data['solicit-response']
        correl = json_data['correl']
        encoding = json_data['encoding']

        # Extract 'my' service id
        for responder in json_data['request-response']:
            if RMQ_TOPIC in responder: request_response = responder

        # Seperate service type from platform/system path
        service = request_response.split("/")[2]
        if service in type_handlers:
            response_msg = type_handlers[service](msg)
        else:
            response_msg = "unknown service"

        # Generate response
        json_response = {}
        json_response['op'] = "response"
        json_response['solicit-response'] = solicit_response
        json_response['msg'] = response_msg
        json_response['request-response'] = request_response
        json_response['correl'] = correl
        return(json_response)

 
   # Handle 'Notification' messages (unused)
    def notification(json_data):
        return(False)


    input_handlers = {'request' : request,
                      'notification' : notification}

    if "op" in json_data: 
        if json_data['op'] in input_handlers: return(input_handlers[str(json_data['op'])](json_data))

    return(False)


def processRMQInput(data):
    try:
        json_data = json.loads(data)
        if 'camera' in json_data:
            if 'tilt' in json_data['camera']: CONTROL_DATA.cameraTiltPosition = json_data['camera']['tilt']
            if 'pan' in json_data['camera']: CONTROL_DATA.cameraPanPosition = json_data['camera']['pan']
            if 'light' in json_data['camera']: CONTROL_DATA.cameraLightState = json_data['camera']['light']

        if 'vehicle' in json_data:
            if 'throttle' in json_data['vehicle']: CONTROL_DATA.throttlePosition = json_data['vehicle']['throttle']
            if 'direction' in json_data['vehicle']: CONTROL_DATA.directionPosition = json_data['vehicle']['direction']
            if 'brake' in json_data['vehicle']: CONTROL_DATA.brakeState = json_data['vehicle']['brake']
            if 'light' in json_data['vehicle']: CONTROL_DATA.vehicleLightState = json_data['vehicle']['light']
            if 'wifi' in json_data['vehicle']: VEHICLE_DATA.vehicleWifi = json_data['vehicle']['wifi']
            if 'batteryA' in json_data['vehicle']: VEHICLE_DATA.vehicleBatteryA = json_data['vehicle']['batteryA']
            if 'batteryB' in json_data['vehicle']: VEHICLE_DATA.vehicleBatteryB = json_data['vehicle']['batteryB']

        if 'environment' in json_data:
            if 'temperature' in json_data['environment']: VEHICLE_DATA.environmentTemperature = json_data['environment']['temperature']
            if 'humidity' in json_data['environment']: VEHICLE_DATA.environmentHumidity = json_data['environment']['humidity']
            if 'pressure' in json_data['environment']: VEHICLE_DATA.environmentPressure = json_data['environment']['pressure']

        if 'GPS' in json_data:
            if 'latitude' in json_data['GPS']: VEHICLE_DATA.gpsLatitude = json_data['GPS']['latitude']
            if 'longitude' in json_data['GPS']: VEHICLE_DATA.gpsLongitude = json_data['GPS']['longitude']
            if 'speed' in json_data['GPS']: VEHICLE_DATA.gpsSpeed = json_data['GPS']['speed']
            if 'altitude' in json_data['GPS']: VEHICLE_DATA.gpsAltitude = json_data['GPS']['altitude']

        if 'accelerometer' in json_data:
            if 'x' in json_data['accelerometer']: VEHICLE_DATA.accelLR = json_data['accelerometer']['x']
            if 'y' in json_data['accelerometer']: VEHICLE_DATA.accelRF = json_data['accelerometer']['y']
 
    except:
        return(False)



def registerEdgwareTypes(mqtt_client):
    # Services
    services = {}
    services['environment-sensor'] = {"type":"environment-sensor",
                                      "mode":"request-response"}

    services['gps'] = {"type":"gps",
                       "mode":"request-response"}

    services['accelerometer'] = {"type":"accelerometer",
                                 "mode":"request-response"}

    services['vehicle-status'] = {"type":"vehicle-status",
                                 "mode":"request-response"}

    services['vehicle-control'] = {"type":"vehicle-control",
                                   "mode":"request-response"}

    services['camera-control'] = {"type":"camera-control",
                                   "mode":"request-response"}

    # Systems (collections of services)
    systems = {}
    systems['vehicle'] = {"type":"vehicle",
                          "services":[{"type":services['environment-sensor']['type']},
                                      {"type":services['accelerometer']['type']},
                                      {"type":services['vehicle-status']['type']},
                                      {"type":services['gps']['type']}]}

    systems['control'] = {"type":"control",
                          "services":[{"type":services['vehicle-control']['type']},
                                      {"type":services['camera-control']['type']}]}

    # Platforms (collections of systems)
    platforms = {}
    platforms['simulation-platform'] = {"type":"simulation-platform"}


    try:
        i = 100
        for service in services:
            i += 1
            service_type = edgware.serviceType()
            service_type.type = services[service]['type']
            service_type.mode = services[service]['mode']
            service_type.correl = i
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(service_type.generateJSON()))
    
        i = 1000
        for system in systems:
            i += 1
            system_type = edgware.systemType()
            system_type.type = systems[system]['type']
            system_type.services = systems[system]['services']
            system_type.correl = i
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system_type.generateJSON()))
    
        i = 2000
        for platform in platforms:
            i += 1
            platform_type = edgware.platformType()
            platform_type.type = platforms[platform]['type']
            platform_type.correl = i
            writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(platform_type.generateJSON()))
    except:
        return(False)


def main():
    
    #### SETUP MQTT CONNECTION
    mqtt_reader_pconn, mqtt_reader_cconn = multiprocessing.Pipe()
    mqtt_client = mqtt.mqttClient(host=MQTT_HOST, port=MQTT_PORT, pipe=mqtt_reader_cconn, client_id=("adp" + str(RMQ_TOPIC)))

    if mqtt_client.connected != True:
        raise SystemExit("FATAL: Failed to connect to MQTT broker")

    mqtt_client.subscribe(topic=MQTT_TOPIC_OUT)

    mqtt_client.client.loop_start()       


    #### SETUP RABBITMQ CONNECTION
    rmq_control_pconn, rmq_control_cconn = multiprocessing.Pipe()
    rmq_control_reader = rmq.rmqClientReader(host=RMQ_HOST, port=RMQ_PORT)
    if rmq_control_reader.connected == False:
        raise SystemExit("FATAL: Failed to connect to RQM broker")

    rmq_control_reader.subscribe(RMQ_EXCHANGE_CONTROL, RMQ_TOPIC)



    rmq_vehicle_pconn, rmq_vehicle_cconn = multiprocessing.Pipe()
    rmq_vehicle_reader = rmq.rmqClientReader(host=RMQ_HOST, port=RMQ_PORT)
    if rmq_vehicle_reader.connected == False:
        raise SystemExit("FATAL: Failed to connect to RQM broker")
 
    rmq_vehicle_reader.subscribe(RMQ_EXCHANGE_VEHICLE, RMQ_TOPIC)

    rmq_client_writer = rmq.rmqClientWriter(host=RMQ_HOST, port=RMQ_PORT)


    rmq_vehicle_thread = multiprocessing.Process(target=rmq_vehicle_reader.run, args=(rmq_vehicle_cconn,))
    rmq_vehicle_thread.start()

    rmq_control_thread = multiprocessing.Process(target=rmq_control_reader.run, args=(rmq_control_cconn,))
    rmq_control_thread.start()


    # Register edgware types
    registerEdgwareTypes(mqtt_client)


    ## Define elements
    # Platforms
    platform = edgware.platform()
    platform.type = "simulation-platform"
    platform.id = RMQ_TOPIC
    platform.correl = 10001
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(platform.generateJSON()))


    # Systems (+ activate)
    system = edgware.system()
    system.type = "vehicle"
    system.id = platform.id + "/vehicle"
    system.correl = 20001
    activate_system = json.dumps({"op":"state:system", "id": system.id, "state":"running", "correl":20002})
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system.generateJSON()))
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, activate_system)


    system = edgware.system()
    system.type = "control"
    system.id = platform.id + "/control"
    system.correl = 30001
    activate_system = json.dumps({"op":"state:system", "id": system.id, "state":"running", "correl":30002})
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system.generateJSON()))
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, activate_system)

    time.sleep(2)

    # Forever loop
    while 1:

        if mqtt_reader_pconn.poll() == True: 
            response = processMQTTInput(mqtt_reader_pconn.recv())
            if response != False: writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(response))

        if rmq_control_pconn.poll() == True: processRMQInput(rmq_control_pconn.recv())
        if rmq_vehicle_pconn.poll() == True: processRMQInput(rmq_vehicle_pconn.recv())

        time.sleep(.2)


    # Clean-up
    mqtt_client.client.loop_stop()
    rmq_control.join()



if __name__ == '__main__':
    try: 
        main()
    except (KeyboardInterrupt, SystemExit):
        mqtt_client.client.loop_stop()
        rmq_control.join()
        print "Exiting..."

