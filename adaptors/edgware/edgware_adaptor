#!/usr/bin/python -B

import json
import time
import multiprocessing
import ConfigParser

import class_mqtt as mqtt
import class_rmq as rmq
import class_edgware as edgware


try: 
    config = ConfigParser.ConfigParser()
    config.read('edgware_adaptor.cfg')
except:
    raise SystemExit("FATAL: Could not open config file")

# RabbitMQ connection details
RMQ_HOST = config.get('platform_broker', 'server')
RMQ_PORT = int(config.get('platform_broker', 'port'))
RMQ_EXCHANGE_CONTROL = config.get('platform_broker', 'control_exchange')
RMQ_EXCHANGE_VEHICLE = config.get('platform_broker', 'vehicle_exchange')
RMQ_TOPIC = config.get('platform_broker', 'vehicle_id')

# Mosquitto connection details
MQTT_HOST = config.get('edgware_broker', 'server')
MQTT_PORT = int(config.get('edgware_broker', 'port'))
MQTT_TOPIC_IN = config.get('edgware_broker', 'input_topic')
MQTT_TOPIC_OUT = config.get('edgware_broker', 'output_topic')

# Edgware connection details
EDGWARE_NODE = config.get('edgware', 'node_id')


def writeMQTTOutput(client, topic, data):
#    mqtt_client.publish(topic="$test/test01", payload="a test message from python")
    client.publish(topic=topic, payload=data)
    nothing = None

def writeRMQOutput(client, exchange, topic, data):
#    rmq_client_writer.
    nothing = None

def processMQTTInput(data):
    json_data = json.loads(data)

    def request(json_data):
        # Extract request data
        op = json_data['op']
        msg = json_data['msg']
        solicit_response = json_data['solicit-response']
        correl = json_data['correl']
        encoding = json_data['encoding']

        for responder in json_data['request-response']:
            if RMQ_TOPIC in responder: request_response = responder

        # Generate response
        json_response = {}
        json_response['op'] = "response"
        json_response['solicit-response'] = solicit_response
        json_response['msg'] = 20        ########### CALL OUT TO FUNCTION FOR SENSOR
        json_response['request-response'] = request_response
        json_response['correl'] = correl

        return(json_response)

    def notification(json_data):
        return(False)

    input_handlers = {'request' : request,
                      'notification' : notification}

    if "op" in json_data: 
        if json_data['op'] in input_handlers: return(input_handlers[str(json_data['op'])](json_data))

    return(False)



def processRMQInput(data):
    print("RMQ -- " + str(data))


def main():
    
    #### SETUP MQTT CONNECTION
    mqtt_reader_pconn, mqtt_reader_cconn = multiprocessing.Pipe()
    mqtt_client = mqtt.mqttClient(host=MQTT_HOST, port=MQTT_PORT, pipe=mqtt_reader_cconn, client_id="python")

    if mqtt_client.connected != True:
        raise SystemExit("FATAL: Failed to connect to MQTT broker")

    mqtt_client.subscribe(topic=MQTT_TOPIC_OUT)

    mqtt_client.client.loop_start()       


    #### SETUP RABBITMQ CONNECTION
    rmq_control_pconn, rmq_control_cconn = multiprocessing.Pipe()
    rmq_control_reader = rmq.rmqClientReader(host=RMQ_HOST, port=RMQ_PORT)
    if rmq_control_reader.connected == False:
        raise SystemExit("FATAL: Failed to connect to RQM broker")

    rmq_control_reader.subscribe(RMQ_EXCHANGE_CONTROL, RMQ_TOPIC)



    rmq_vehicle_pconn, rmq_vehicle_cconn = multiprocessing.Pipe()
    rmq_vehicle_reader = rmq.rmqClientReader(host=RMQ_HOST, port=RMQ_PORT)
    if rmq_vehicle_reader.connected == False:
        raise SystemExit("FATAL: Failed to connect to RQM broker")
 
    rmq_vehicle_reader.subscribe(RMQ_EXCHANGE_VEHICLE, RMQ_TOPIC)

    rmq_client_writer = rmq.rmqClientWriter(host=RMQ_HOST, port=RMQ_PORT)


    rmq_vehicle_thread = multiprocessing.Process(target=rmq_vehicle_reader.run, args=(rmq_vehicle_cconn,))
    rmq_vehicle_thread.start()

    rmq_control_thread = multiprocessing.Process(target=rmq_control_reader.run, args=(rmq_control_cconn,))
    rmq_control_thread.start()


    ##### SETUP EDGWARE     
    ## Define element types
    # Service Types
    service_type = edgware.serviceType()
    service_type.type = "temp_sensor"
    service_type.mode = "request-response"
    service_type.correl = 100
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(service_type.generateJSON()))

    service_type = edgware.serviceType()
    service_type.type = "vehicle_control"
    service_type.mode = "request-response"
    service_type.correl = 101
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(service_type.generateJSON()))

    # System Types
    system_type = edgware.systemType()
    system_type.type = "vehicle"
    system_type.services.append({'type':'temp_sensor'})
    system_type.correl = 200
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system_type.generateJSON()))

    system_type = edgware.systemType()
    system_type.type = "control"
    system_type.services.append({'type':'vehicle_control'})
    system_type.correl = 201
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system_type.generateJSON()))

    # Platform Types
    platform_type = edgware.platformType()
    platform_type.type = "pi_rover"
    platform_type.correl = 300
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(platform_type.generateJSON()))


    ## Define elements
    # Platforms
    platform = edgware.platform()
    platform.type = "pi_rover"
    platform.id = RMQ_TOPIC
    platform.correl = 10001
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(platform.generateJSON()))

    # Systems (+ activate)
    system = edgware.system()
    system.type = "vehicle"
    system.id = platform.id + "/vehicle"
    print system.id 
    system.correl = 20001
    activate_system = json.dumps({"op":"state:system", "id": system.id, "state":"running", "correl":20002})
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system.generateJSON()))
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, activate_system)

    system = edgware.system()
    system.type = "control"
    system.id = platform.id + "/control"
    system.correl = 30001
    activate_system = json.dumps({"op":"state:system", "id": system.id, "state":"running", "correl":30002})
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(system.generateJSON()))
    writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, activate_system)


    # Forever loop
    while 1:

        if mqtt_reader_pconn.poll() == True: 
            response = processMQTTInput(mqtt_reader_pconn.recv())
            if response != False: writeMQTTOutput(mqtt_client, MQTT_TOPIC_IN, json.dumps(response))


        if rmq_control_pconn.poll() == True: processRMQInput(rmq_control_pconn.recv())
        if rmq_vehicle_pconn.poll() == True: processRMQInput(rmq_vehicle_pconn.recv())

        time.sleep(.2)


    # Clean-up
    mqtt_client.client.loop_stop()
    rmq_control.join()



if __name__ == '__main__':
    try: 
        main()
    except (KeyboardInterrupt, SystemExit):
        mqtt_client.client.loop_stop()
        rmq_control.join()
        print "Exiting..."

